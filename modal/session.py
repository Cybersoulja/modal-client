import asyncio
import functools
import io
import os
import sys

from ._async_utils import TaskContext, run_coro_blocking, synchronizer
from ._client import Client
from ._grpc_utils import BLOCKING_REQUEST_TIMEOUT, GRPC_REQUEST_TIME_BUFFER
from ._object_meta import ObjectMeta
from ._progress import ProgressSpinner
from ._serialization import Pickler, Unpickler
from ._session_singleton import (
    get_container_session,
    get_default_session,
    set_container_session,
    set_running_session,
)
from ._session_state import SessionState
from ._utils import print_logs
from .config import config, logger
from .exception import ExecutionError, NotFoundError
from .object import Object
from .proto import api_pb2


@synchronizer
class Session:
    """The Session manages objects in a few ways

    1. Every object belongs to a session
    2. Sessions are responsible for syncing object identities across processes
    3. Sessions manage all log collection for ephemeral functions

    "session" isn't a great name, a better name is probably "scope".
    """

    @classmethod
    def initialize_container_session(cls):
        set_container_session(super().__new__(cls))

    def __new__(cls, *args, **kwargs):
        singleton = get_container_session()
        if singleton is not None:
            # If there's a singleton session, just return it for everything
            return singleton
        else:
            # Refer to the normal constructor
            session = super().__new__(cls)
            return session

    def __init__(self, show_progress=True, blocking_late_creation_ok=False, name=None):
        if hasattr(self, "_initialized"):
            return  # Prevent re-initialization with the singleton
        self._initialized = True
        self.client = None
        self.name = name or self._infer_session_name()
        self.state = SessionState.NONE
        self._pending_create_objects = []  # list of objects that haven't been created
        self._created_tagged_objects = {}  # tag -> object id
        self._show_progress = show_progress
        self._last_log_batch_entry_id = ""
        # TODO: this is a very hacky thing for notebooks. The problem is that
        # (a) notebooks require creating functions "late"
        # (b) notebooks run with an event loop, which makes synchronizer confused
        # We will have to rethink this soon.
        self._blocking_late_creation_ok = blocking_late_creation_ok
        super().__init__()

    def _infer_session_name(self):
        script_filename = os.path.split(sys.argv[0])[-1]
        args = [script_filename] + sys.argv[1:]
        return " ".join(args)

    def get_object_id_by_tag(self, tag):
        """Assigns an id to the object if there is already one set.

        This happens inside a container in the global scope."""
        return self._created_tagged_objects.get(tag)

    def register_object(self, obj):
        """Registers an object to be created by the session so that it's available in modal.

        This is only used by factories and functions."""
        if obj.tag is None:
            raise Exception("Can only register named objects")
        if self.state == SessionState.NONE:
            self._pending_create_objects.append(obj)
        elif self._blocking_late_creation_ok:
            # See comment in constructor. This is a hacky hack to get notebooks working.
            # Let's revisit this shortly
            run_coro_blocking(self.create_object(obj))
        else:
            raise Exception("Can only register objects on a session that's not running")

    async def _get_logs(self, stdout, stderr, draining=False, timeout=BLOCKING_REQUEST_TIMEOUT):
        # control flow-wise, there should only be one _get_logs running for each session
        # i.e. maintain only one active SessionGetLogs grpc for each session
        request = api_pb2.SessionGetLogsRequest(
            session_id=self.session_id,
            timeout=timeout,
            draining=draining,
            last_entry_id=self._last_log_batch_entry_id,
        )
        n_running = None
        async for log_batch in self.client.stub.SessionGetLogs(request, timeout=timeout + GRPC_REQUEST_TIME_BUFFER):
            # if done or n_running, the batch was generated by the server
            if log_batch.done:
                logger.info("No more logs for this session")
                return
            elif log_batch.n_running:
                n_running = log_batch.n_running
            else:
                if log_batch.entry_id != "":
                    # log_batch entry_id is empty for fd="server" messages from SessionGetLogs
                    self._last_log_batch_entry_id = log_batch.entry_id
                for log in log_batch.state_updates:
                    self._progress.update_task_state(log.task_id, log.task_state)
                for log in log_batch.items:
                    assert not log.task_state
                    with self._progress.hidden():
                        print_logs(log.data, log.fd, stdout, stderr)
        if draining:
            raise Exception(
                f"Failed waiting for all logs to finish. There are still {n_running} tasks the server will kill."
            )

    async def initialize_container(self, session_id, client, task_id):
        """Used by the container to bootstrap the session and all its objects."""
        self.session_id = session_id
        self.client = client

        req = api_pb2.SessionGetObjectsRequest(session_id=session_id, task_id=task_id)
        resp = await self.client.stub.SessionGetObjects(req)
        self._created_tagged_objects = dict(resp.object_ids)

        # In the container, run forever
        self.state = SessionState.RUNNING
        set_running_session(self)

    async def create_object(self, obj):
        """Takes an object as input, returns an object id.

        This is a noop for any object that's not a factory.
        """
        if not obj.is_factory():
            # This object is already created, just return the id
            return obj.object_id

        assert obj.tag
        self._progress.set_substep_text(f"Creating {obj.tag}...", obj.tag)

        # Already created
        if obj.tag in self._created_tagged_objects:
            return self._created_tagged_objects[obj.tag]

        # Create object
        object_id = await obj.load(self)
        if object_id is None:
            raise Exception(f"object_id for object of type {type(obj)} is None")

        obj.set_object_id(object_id, self)
        self._created_tagged_objects[obj.tag] = object_id
        return object_id

    async def _flush_objects(self):
        "Create objects that have been defined but not created on the server."

        while len(self._pending_create_objects) > 0:
            obj = self._pending_create_objects.pop()

            if obj.object_id is not None:
                # object is already created (happens due to object re-initialization in the container).
                # TODO: we should check that the object id isn't old
                continue

            logger.debug(f"Creating object {obj}")
            await self.create_object(obj)

    @synchronizer.asynccontextmanager
    async def _run(self, client, stdout, stderr, logs_timeout):
        # TOOD: use something smarter than checking for the .client to exists in order to prevent
        # race conditions here!
        if self.state != SessionState.NONE:
            raise Exception(f"Can't start a session that's already in state {self.state}")
        self.state = SessionState.STARTING
        self.client = client

        # We need to re-initialize all these objects. Needed if a session is reused.
        initial_objects = list(self._pending_create_objects)

        try:
            # Start session
            req = api_pb2.SessionCreateRequest(client_id=client.client_id, name=self.name)
            resp = await client.stub.SessionCreate(req)
            self.session_id = resp.session_id

            # Start tracking logs and yield context
            async with TaskContext(grace=1.0) as tc:
                self._progress = ProgressSpinner(visible=self._show_progress)
                self._progress.step("Initializing...", "Initialized.")
                get_logs_closure = functools.partial(self._get_logs, stdout, stderr)
                functools.update_wrapper(get_logs_closure, self._get_logs)  # Needed for debugging tasks
                tc.infinite_loop(get_logs_closure)

                self._progress.step("Creating objects...", "Created objects.")
                # Create all members
                await self._flush_objects()
                self._progress.step("Running session...", "Session completed.")

                # Create the session (and send a list of all tagged obs)
                req = api_pb2.SessionSetObjectsRequest(
                    session_id=self.session_id,
                    object_ids=self._created_tagged_objects,
                )
                await self.client.stub.SessionSetObjects(req)

                self.state = SessionState.RUNNING
                yield self  # yield context manager to block
                self.state = SessionState.STOPPING

            # Stop session (this causes the server to kill any running task)
            logger.debug("Stopping the session server-side")
            req = api_pb2.SessionStopRequest(session_id=self.session_id)
            await self.client.stub.SessionStop(req)
            self._progress.step("Draining logs...", "Finished draining logs.")

            # Fetch any straggling logs
            logger.debug("Draining logs")
            logs_timeout = logs_timeout or config["logs_timeout"]
            await self._get_logs(stdout, stderr, draining=True, timeout=logs_timeout)
            self._progress.stop()
        finally:
            if self.state == SessionState.RUNNING:
                logger.warn("Stopping running session...")
                req = api_pb2.SessionStopRequest(session_id=self.session_id)
                await self.client.stub.SessionStop(req)
            self.client = None
            self.state = SessionState.NONE
            self._pending_create_objects = initial_objects
            self._created_tagged_objects = {}

    @synchronizer.asynccontextmanager
    async def _get_client(self, client=None):
        if client is None:
            async with Client.from_env() as client:
                yield client
        else:
            yield client

    @synchronizer.asynccontextmanager
    async def run(self, client=None, stdout=None, stderr=None, logs_timeout=None):
        set_running_session(self)
        try:
            async with self._get_client(client) as client:
                async with self._run(client, stdout, stderr, logs_timeout) as it:
                    yield it  # ctx mgr
        finally:
            set_running_session(None)

    async def share(self, obj, label, namespace=api_pb2.ShareNamespace.SN_ACCOUNT):
        # TODO: deprecated, use .deploy instead
        assert obj.object_id
        request = api_pb2.SessionShareObjectRequest(
            session_id=self.session_id,
            object_id=obj.object_id,
            label=label,
            namespace=namespace,
        )
        await self.client.stub.SessionShareObject(request)

    async def use(self, label, namespace=api_pb2.ShareNamespace.SN_ACCOUNT):
        request = api_pb2.SessionUseObjectRequest(
            session_id=self.session_id,
            label=label,
            namespace=namespace,
        )
        response = await self.client.stub.SessionUseObject(request)
        if not response.found:
            raise NotFoundError(f"Could not find object {label} (namespace {namespace})")
        return Object._init_share(response.object_id, self)

    async def deploy(self, name, obj_or_objs, namespace=api_pb2.ShareNamespace.SN_ACCOUNT):
        object_id = None
        object_ids = None  # name -> object_id
        if isinstance(obj_or_objs, Object):
            object_id = obj_or_objs.object_id
        elif isinstance(obj_or_objs, dict):
            object_ids = {label: obj.object_id for label, obj in obj_or_objs.items()}
        elif obj_or_objs is None:
            pass
        else:
            raise InvalidError(f"{obj_or_objs} not an Object or dict or None")
        request = api_pb2.SessionDeployRequest(
            session_id=self.session_id,
            name=name,
            namespace=namespace,
            object_id=object_id,
            object_ids=object_ids,
        )
        await self.client.stub.SessionDeploy(request)

    def serialize(self, obj):
        """Serializes object and replaces all references to the client class by a placeholder."""
        buf = io.BytesIO()
        Pickler(self, buf).dump(obj)
        return buf.getvalue()

    def deserialize(self, s: bytes):
        """Deserializes object and replaces all client placeholders by self."""
        return Unpickler(self, ObjectMeta.prefix_to_type, io.BytesIO(s)).load()


def run(*args, **kwargs):
    """Start up the default modal session"""
    if get_container_session() is not None:
        # TODO: we could probably capture whether this happens during an import
        raise ExecutionError("Cannot run modal.run() inside a container!" " You might have global code that does this.")
    session = get_default_session()
    return session.run(*args, **kwargs)
