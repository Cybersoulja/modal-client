syntax = "proto3";

/*
  Compile by running (in the "client" directory of the repo):

  python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. polyester/proto/api.proto --experimental_allow_proto3_optional
*/

package polyester.client;

message Empty {

}

message GenericResult {  // Used for both tasks and function outputs
  enum Status {UNKNOWN = 0; SUCCESS = 1; FAILURE = 2;}
  Status status = 1;
  string exception = 2;
  int32 exitcode = 3;
  string traceback = 4;
  bytes data = 5;
  bool incomplete = 6;  // Only used for generators right now, tells client not to count this result yet
}

enum ClientType {
  UNKNOWN = 0;
  CLIENT = 1;
  WORKER = 2;
  CONTAINER = 3;
  SERVER = 4;
}

message ClientCreateRequest {
  ClientType client_type = 1;
}

message ClientCreateResponse {
  string client_id = 1;
  string error = 2;
}

message ClientHeartbeatRequest {
  string client_id = 1;
}

message SessionCreateRequest {
  string client_id = 1;
}

message SessionCreateResponse {
  string session_id = 1;
}

message SessionStopRequest {
  string session_id = 1;
}

message SessionGetLogsRequest {
  string session_id = 1;
  float timeout = 2;
  bool draining = 3;
}

message TaskLogs {
  bytes data = 1;
  string fd = 2;
  string task_id = 3;
  bool done = 4;
}

message QueueCreateResponse {
  string queue_id = 1;
}

message QueueGetRequest {
  string queue_id = 1;
  bool block = 2;
  float timeout = 3;
  int32 n_values = 4;
  string idempotency_key = 5;
}

message QueueGetResponse {
  repeated bytes values = 2;
}

message QueuePutRequest {
  string queue_id = 1;
  string idempotency_key = 3;
  repeated bytes values = 4;
}

message BaseLayer {
  string layer_id = 1;
  string docker_tag = 2;
}

message LayerContextFile {
  string filename = 1;
  bytes data = 2;
}

message Layer {
  string processor = 4;
  repeated BaseLayer base_layers = 5;
  repeated string dockerfile_commands = 6;
  repeated LayerContextFile context_files = 7;
}

message LayerGetOrCreateRequest {
  Layer layer = 2;
  bool must_create = 3;
  string session_id = 4;
}

message LayerGetOrCreateResponse {
  string layer_id = 1;
}

message LayerJoinRequest {
  string layer_id = 1;
  float timeout = 2;
  string session_id = 3;
}

message LayerJoinResponse {
  GenericResult result = 1;
}

message LayerGetByTagRequest {
  string tag = 1;
}

message LayerGetByTagResponse {
  string layer_id = 1;
}

message LayerSetTagRequest {
  string layer_id = 1;
  string tag = 2;
}

message DictCreateRequest {
  map<string, bytes> data = 1;
  string session_id = 2;
}

message DictCreateResponse {
  string dict_id = 1;
}

message DictGetRequest {
  string dict_id = 1;
  string key = 2;
}

message DictGetResponse {
  bool found = 1 ;
  optional bytes value = 2;
}

message DictUpdateRequest {
  string dict_id = 1;
  map<string, bytes> updates = 2;
}

message DictUpdateResponse {
}

message DictPopRequest {
  string dict_id = 1;
  string key = 2;
}

message DictPopResponse {
  bool found = 1 ;
  optional bytes value = 2;
}

message EnvDictCreateRequest {
  map<string, string> env_dict = 1;
  string session_id = 2;
}

message EnvDictCreateResponse {
  string env_dict_id = 1;
}

message Image {
  string layer_id = 1;
  string local_id = 2;
  string env_dict_id = 3;
  bool local = 4;
}

message ImageCreateRequest {
  Image image = 1;
  string session_id = 3;
}

message ImageCreateResponse {
  string image_id = 2;
}

message Function {
  string module_name = 1;
  string function_name = 2;
  // TODO: should we include client id or some sort of namespace?
  // What about image_local_id? (needed to hash function to an id)
  repeated string mount_ids = 3;
}

message FunctionGetOrCreateRequest {
  string image_id = 2;
  Function function = 8;
  string session_id = 9;
}

message FunctionGetOrCreateResponse {
  string function_id = 1;
}

message FunctionCallRequest {
  string function_id = 1;
  repeated bytes inputs = 2;
  string call_id = 3;  // Optional, will create a new call_id if not set
  string idempotency_key = 4;
}

message FunctionCallResponse {
  string call_id = 1;  // Internally on the server it identifies a result queue
}

message FunctionGetNextOutputRequest {
  string function_id = 1;
  string call_id = 2;
  float timeout = 3;
  int32 n_outputs = 4;
  string idempotency_key = 5;
}

message FunctionGetNextOutputResponse {
  repeated GenericResult outputs = 2;
}

message FunctionGetNextCallRequest {
  string function_id = 1;
}

message FunctionGetNextCallResponse {
  string call_id = 1;
  bytes input = 2;
}

message FunctionGetNextInputRequest {
  string function_id = 1;
  string idempotency_key = 2;
  float timeout = 3;
  string task_id = 4;
}

message FunctionGetNextInputResponse {
  bool stop = 2;
  bytes data = 3;
  string input_id = 5;
}

message FunctionOutputRequest {
  GenericResult output = 3;
  string idempotency_key = 4;
  bool done = 6;  // TODO: use later for generators
  string input_id = 7;
}

message MountCreateRequest {
  string session_id = 2;
}

message MountCreateResponse {
  string mount_id = 1;
}

message MountRegisterFileRequest {
  string filename = 1;
  string sha256_hex = 2;
  string mount_id = 3;
}

message MountRegisterFileResponse {
  string filename = 1;
  bool exists = 2;
}

message MountUploadFileRequest {
  string sha256_hex = 1;
  int32 size = 2;
  bytes data = 3;
  string mount_id = 4;
}

message MountDoneRequest {
  string mount_id = 1;
}

service PolyesterClient {
  // Clients
  rpc ClientCreate(ClientCreateRequest) returns (ClientCreateResponse);
  rpc ClientHeartbeats(stream ClientHeartbeatRequest) returns (Empty);

  // Sessions
  rpc SessionCreate(SessionCreateRequest) returns (SessionCreateResponse);
  rpc SessionStop(SessionStopRequest) returns (Empty);
  rpc SessionGetLogs(SessionGetLogsRequest) returns (stream TaskLogs);

  // Queues
  rpc QueueCreate(Empty) returns (QueueCreateResponse);  // TODO: we should create it inside a session
  rpc QueueGet(QueueGetRequest) returns (QueueGetResponse);
  rpc QueuePut(QueuePutRequest) returns (Empty);

  // Mounts
  rpc MountCreate(MountCreateRequest) returns (MountCreateResponse);
  rpc MountRegisterFile(stream MountRegisterFileRequest) returns (stream MountRegisterFileResponse);
  rpc MountUploadFile(stream MountUploadFileRequest) returns (Empty);  // TODO: return something?
  rpc MountDone(MountDoneRequest) returns (Empty);

  // Layers
  rpc LayerGetOrCreate(LayerGetOrCreateRequest) returns (LayerGetOrCreateResponse);
  rpc LayerJoin(LayerJoinRequest) returns (LayerJoinResponse);
  rpc LayerGetByTag(LayerGetByTagRequest) returns (LayerGetByTagResponse);
  rpc LayerSetTag(LayerSetTagRequest) returns (Empty);

  // Dicts
  rpc DictCreate(DictCreateRequest) returns (DictCreateResponse);
  rpc DictUpdate(DictUpdateRequest) returns (DictUpdateResponse);
  rpc DictGet(DictGetRequest) returns (DictGetResponse);
  rpc DictPop(DictPopRequest) returns (DictPopResponse);

  // Env Dicts
  rpc EnvDictCreate(EnvDictCreateRequest) returns (EnvDictCreateResponse);

  // Images
  rpc ImageCreate(ImageCreateRequest) returns (ImageCreateResponse);

  // Functions
  rpc FunctionGetOrCreate(FunctionGetOrCreateRequest) returns (FunctionGetOrCreateResponse);
  rpc FunctionCall(FunctionCallRequest) returns (FunctionCallResponse);
  rpc FunctionGetNextOutput(FunctionGetNextOutputRequest) returns (FunctionGetNextOutputResponse);  // Returns the next result
  rpc FunctionGetNextInput(FunctionGetNextInputRequest) returns (FunctionGetNextInputResponse);  // For containers to request next call
  rpc FunctionOutput(FunctionOutputRequest) returns (Empty);  // For containers to return result
}
