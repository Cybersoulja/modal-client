syntax = "proto3";

/*
  Compile by running (in the "client" directory of the repo):

  python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. polyester/proto/api.proto --experimental_allow_proto3_optional
*/

package polyester.client;

import "google/protobuf/any.proto";

message Empty {

}

message ContainerArguments{  // This is used to pass data from the worker to the container
  string task_id = 1;
  string function_id = 2;
  string input_buffer_id = 3;
  string session_id = 4;
  string module_name = 5;
  string function_name = 6;
}

message GenericResult {  // Used for both tasks and function outputs
  enum Status {UNKNOWN = 0; SUCCESS = 1; FAILURE = 2;}
  Status status = 1;
  string exception = 2;
  int32 exitcode = 3;
  string traceback = 4;
  bytes data = 5;

  enum GeneratorStatus {NOT_GENERATOR = 0; INCOMPLETE = 1; COMPLETE = 2;}
  GeneratorStatus gen_status = 7;
}

message BufferItem {
  google.protobuf.Any data = 1;
  bool EOF = 2;
  string item_id = 3; // Each element is given an ID by the server.
}

message BufferWriteRequest {
  string buffer_id = 1;
  int32 idx = 2;
  BufferItem item = 3;
  string idempotency_key = 4;
}

message BufferWriteResponse {
  enum BufferWriteStatus {UNKNOWN = 0; SUCCESS = 1; BUFFER_FULL = 2;}
  BufferWriteStatus status = 1;
}

message BufferReadRequest {
  string buffer_id = 1;
  int32 max_values = 2;
  float timeout = 3;
}

message BufferReadResponse {
  BufferItem item = 1;
  enum BufferReadStatus {UNKNOWN = 0; SUCCESS = 1; TIMEOUT = 2;}
  BufferReadStatus status = 2;
}

enum ClientType {
  UNKNOWN = 0;
  CLIENT = 1;
  WORKER = 2;
  CONTAINER = 3;
  SERVER = 4;
}

message ClientCreateRequest {
  ClientType client_type = 1;
}

message ClientCreateResponse {
  string client_id = 1;
  string error = 2;
}

message ClientHeartbeatRequest {
  string client_id = 1;
}

message SessionCreateRequest {
  string client_id = 1;
}

message SessionCreateResponse {
  string session_id = 1;
}

message SessionStopRequest {
  string session_id = 1;
}

message SessionGetLogsRequest {
  string session_id = 1;
  float timeout = 2;
  bool draining = 3;
}

message SessionSetObjectsRequest {
  // TODO: this is a bit of a hacky request meant to be somewhat temporary
  // At some point, every object should be assigned to a session/namespace when created,
  // so this method won't be necessary.
  string session_id = 1;
  map<string, string> object_ids = 2;
}

message SessionGetObjectsRequest {
  string session_id = 1;
}

message SessionGetObjectsResponse {
  map<string, string> object_ids = 1;
}

message TaskLogs {
  bytes data = 1;
  string fd = 2;
  string task_id = 3;
  bool done = 4;
}

message QueueCreateResponse {
  string queue_id = 1;
}

message QueueGetRequest {
  string queue_id = 1;
  bool block = 2;
  float timeout = 3;
  int32 n_values = 4;
  string idempotency_key = 5;
}

message QueueGetResponse {
  repeated bytes values = 2;
}

message QueuePutRequest {
  string queue_id = 1;
  string idempotency_key = 3;
  repeated bytes values = 4;
}

message BaseImage {
  string image_id = 1;
  string docker_tag = 2;
}

message ImageContextFile {
  string filename = 1;
  bytes data = 2;
}

message Image {
  string processor = 4;
  repeated BaseImage base_images = 5;
  repeated string dockerfile_commands = 6;
  repeated ImageContextFile context_files = 7;
  bool local = 8;
  string local_id = 9;
}

message ImageGetOrCreateRequest {
  Image image = 2;
  bool must_create = 3;
  string session_id = 4;
}

message ImageGetOrCreateResponse {
  string image_id = 1;
}

message ImageJoinRequest {
  string image_id = 1;
  float timeout = 2;
  string session_id = 3;
}

message ImageJoinResponse {
  GenericResult result = 1;
}

message ImageGetByTagRequest {
  string tag = 1;
}

message ImageGetByTagResponse {
  string image_id = 1;
}

message ImageSetTagRequest {
  string image_id = 1;
  string tag = 2;
}

message DictEntry {
  bytes key = 1;
  bytes value = 2;
}

message DictCreateRequest {
  repeated DictEntry data = 1;
  string session_id = 2;
}

message DictCreateResponse {
  string dict_id = 1;
}

message DictGetRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictGetResponse {
  bool found = 1 ;
  optional bytes value = 2;
}

message DictContainsRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictContainsResponse {
  bool found = 1;
}

message DictLenRequest {
  string dict_id = 1;
}

message DictLenResponse {
  int32 len = 1;
}

message DictUpdateRequest {
  string dict_id = 1;
  repeated DictEntry updates = 2;
}

message DictUpdateResponse {
}

message DictPopRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictPopResponse {
  bool found = 1 ;
  optional bytes value = 2;
}

message EnvDictCreateRequest {
  map<string, string> env_dict = 1;
  string session_id = 2;
}

message EnvDictCreateResponse {
  string env_dict_id = 1;
}

message Function {
  string module_name = 1;
  string function_name = 2;
  repeated string mount_ids = 3;
  string image_id = 4;
  string env_dict_id = 5;
}

message FunctionGetOrCreateRequest {
  Function function = 8;
  string session_id = 9;
}

message FunctionGetOrCreateResponse {
  string function_id = 1;
}

message FunctionMapRequest {
  string function_id = 1;
}

message FunctionMapResponse {
  string input_buffer_id = 1;
  string output_buffer_id = 2;
}

message FunctionCallRequest {
  string function_id = 1;
  BufferWriteRequest buffer_req = 6;
}

message FunctionGetNextOutputRequest {
  string function_id = 1;
  BufferReadRequest buffer_req = 2;
}

message FunctionInput {
  bytes args = 1;
  bytes kwargs = 2;
  string output_buffer_id = 3;
}

message FunctionGetNextInputRequest {
  string function_id = 1;
  string task_id = 4;
  BufferReadRequest buffer_req = 6;
}

message FunctionOutputRequest {
  string input_id = 7;
  BufferWriteRequest buffer_req = 8;
}

message MountCreateRequest {
  string session_id = 2;
}

message MountCreateResponse {
  string mount_id = 1;
}

message MountRegisterFileRequest {
  string filename = 1;
  string sha256_hex = 2;
  string mount_id = 3;
}

message MountRegisterFileResponse {
  string filename = 1;
  bool exists = 2;
}

message MountUploadFileRequest {
  string sha256_hex = 1;
  int32 size = 2;
  bytes data = 3;
  string mount_id = 4;
}

message MountDoneRequest {
  string mount_id = 1;
}

service PolyesterClient {
  // Clients
  rpc ClientCreate(ClientCreateRequest) returns (ClientCreateResponse);
  rpc ClientHeartbeat(ClientHeartbeatRequest) returns (Empty);

  // Sessions
  rpc SessionCreate(SessionCreateRequest) returns (SessionCreateResponse);
  rpc SessionStop(SessionStopRequest) returns (Empty);
  rpc SessionGetLogs(SessionGetLogsRequest) returns (stream TaskLogs);
  rpc SessionSetObjects(SessionSetObjectsRequest) returns (Empty);
  rpc SessionGetObjects(SessionGetObjectsRequest) returns (SessionGetObjectsResponse);

  // Queues
  rpc QueueCreate(Empty) returns (QueueCreateResponse);  // TODO: we should create it inside a session
  rpc QueueGet(QueueGetRequest) returns (QueueGetResponse);
  rpc QueuePut(QueuePutRequest) returns (Empty);

  // Mounts
  rpc MountCreate(MountCreateRequest) returns (MountCreateResponse);
  rpc MountRegisterFile(stream MountRegisterFileRequest) returns (stream MountRegisterFileResponse);
  rpc MountUploadFile(stream MountUploadFileRequest) returns (Empty);  // TODO: return something?
  rpc MountDone(MountDoneRequest) returns (Empty);

  // Images
  rpc ImageGetOrCreate(ImageGetOrCreateRequest) returns (ImageGetOrCreateResponse);
  rpc ImageJoin(ImageJoinRequest) returns (ImageJoinResponse);
  rpc ImageGetByTag(ImageGetByTagRequest) returns (ImageGetByTagResponse);
  rpc ImageSetTag(ImageSetTagRequest) returns (Empty);

  // Dicts
  rpc DictCreate(DictCreateRequest) returns (DictCreateResponse);
  rpc DictUpdate(DictUpdateRequest) returns (DictUpdateResponse);
  rpc DictGet(DictGetRequest) returns (DictGetResponse);
  rpc DictPop(DictPopRequest) returns (DictPopResponse);
  rpc DictContains(DictContainsRequest) returns (DictContainsResponse);
  rpc DictLen(DictLenRequest) returns (DictLenResponse);

  // Env Dicts
  rpc EnvDictCreate(EnvDictCreateRequest) returns (EnvDictCreateResponse);

  // Functions
  rpc FunctionGetOrCreate(FunctionGetOrCreateRequest) returns (FunctionGetOrCreateResponse);
  rpc FunctionMap(FunctionMapRequest) returns (FunctionMapResponse);
  rpc FunctionCall(FunctionCallRequest) returns (BufferWriteResponse);
  rpc FunctionGetNextOutput(FunctionGetNextOutputRequest) returns (BufferReadResponse);  // Returns the next result
  rpc FunctionGetNextInput(FunctionGetNextInputRequest) returns (BufferReadResponse);  // For containers to request next call
  rpc FunctionOutput(FunctionOutputRequest) returns (BufferWriteResponse);  // For containers to return result
}
